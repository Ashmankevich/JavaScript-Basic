//Functions level 2
/*Complete exercise
NORMAL level
Task 1 üñ•
–í—ã–≤–µ–¥–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –≤ –∫–æ–Ω—Å–æ–ª—å —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ forEach

    const fibonacci = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]
–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è function declaration & arrow function
*/

const fibonacci = [
  0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987,
];

function getNumbres() {
  return fibonacci.forEach(function callback(item) {
    return console.log(item);
  });
}
getNumbres();

function getNumbresTwo() {
  return fibonacci.forEach((item) => console.log(item));
}
getNumbresTwo();

let getNumbresThree = () => fibonacci.forEach((item) => console.log(item));
getNumbresThree();

//Task 2 üñ•
/*–ò—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ map —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Å—Å–∏–≤–∞ users,
–≤ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞:

['member 1: Darya', 'member 2: Masha', ... etc]

    const users = ['Darya', 'Masha', 'Denis', 'Vitaliy', 'Polina', 'Anton']
–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è function declaration & arrow function.
*/

const users = ["Darya", "Masha", "Denis", "Vitaliy", "Polina", "Anton"];

function getUsers() {
  return users.map(function callback(item, index) {
    return `member ${index + 1} : ${item}`;
  });
}
getUsers();

function getUsers() {
  return users.map((item, index) => `member ${index + 1} : ${item}`);
}
getUsers();

let getUsers = () =>
  users.map((item, index) => `member ${index + 1} : ${item}`);
getUsers();

//Task 3 üñ•
/*–° –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ filter —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ –±—É–¥–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª.

    const numbers = [7, -4, 32, -90, 54, 32, -21]
–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è function declaration & arrow function.
*/

const numbers = [7, -4, 32, -90, 54, 32, -21];

function getPos() {
  return numbers.filter((item) => item > 0);
}
getPos();

let getPos2 = () => numbers.filter((item) => item > 0);
getPos2();

//Task 4 üñ•
/*
–ò—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ reduce –ø–æ–ª—É—á–∏—Ç–µ —Å—É–º–º—É –≤—Å–µ—Ö —á–∏—Å–µ–ª –º–∞—Å—Å–∏–≤–∞.

    const fibonacci = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]
–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è function declaration & arrow function.
*/

const fibon = [
  0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987,
];

function getSum() {
  return fibon.reduce((accum, value) => accum + value);
}
getSum();

let getResult = () => fibon.reduce((accum, value) => accum + value);
getResult();

//Task 5 üñ•
/*
–ò—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ find –Ω–∞–π–¥–∏—Ç–µ –≤ –º–∞—Å—Å–∏–≤–µ –ø–µ—Ä–≤–æ–µ —á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ.

    const numbers = [5, 9, 13, 24, 54, 10, 13, 99, 1, 5]
–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è function declaration & arrow function.
*/
const numbersTask5 = [5, 9, 13, 24, 54, 10, 13, 99, 1, 5];

function findNum() {
  return numbersTask5.find((item) => (item % 2 == 0 ? item : null));
}
findNum();

let findNum2 = () => numbersTask5.find((item) => (item % 2 == 0 ? item : null));
findNum2();

//ADVANCED level
/*Task 1 üë®‚Äçüè´
–ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Student

–í –∫–∞–∂–¥–æ–º –æ–±—ä–µ–∫—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª—è salary , rate , name

–í–Ω—É—Ç—Ä–∏ –æ–±—ä–µ–∫—Ç–∞ —Ç–∞–∫–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞.

–ù–∞ –æ—Å–Ω–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
 –∏ –∏–º—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∏–º–µ–Ω–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã.

–°–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ students –∏ –ø–æ–º–µ—Å—Ç–∏—Ç—å –≤ –Ω–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.

–ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.
–ò –≤—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â—É—é —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–æ–≤ –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –≤—ã–¥–∞—Ç—å –≥—Ä—É–ø–ø–µ.

rate –∏–º–µ–µ—Ç 4 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ A B C D

A - –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ –º—ã –º–æ–∂–µ–º –¥–∞—Ç—å —á–µ–ª–æ–≤–µ–∫—É –∫—Ä–µ–¥–∏—Ç –∫–∞–∫ 12 –µ–≥–æ –∑–∞—Ä–ø–ª–∞—Ç
B - —Ö–æ—Ä–æ—à–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ –º—ã –º–æ–∂–µ–º –¥–∞—Ç—å —á–µ–ª–æ–≤–µ–∫—É –∫—Ä–µ–¥–∏—Ç –∫–∞–∫ 9 –µ–≥–æ –∑–∞—Ä–ø–ª–∞—Ç
C - –Ω–µ–ø–ª–æ—Ö–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ –º—ã –º–æ–∂–µ–º –¥–∞—Ç—å —á–µ–ª–æ–≤–µ–∫—É –∫—Ä–µ–¥–∏—Ç –∫–∞–∫ 6 –µ–≥–æ –∑–∞—Ä–ø–ª–∞—Ç
D - –ø–ª–æ—Ö–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ –º—ã –Ω–µ –º–æ–∂–µ–º –¥–∞—Ç—å –∫—Ä–µ–¥–∏—Ç
*/

function Student(name, salary, rate) {
  this.name = name;
  this.salary = salary;
  this.rate = rate;
  this.getLoan = function () {
    let loan;
    switch (this.rate) {
      case "A":
        loan = salary * 12;
        break;
      case "B":
        loan = salary * 8;
        break;
      case "C":
        loan = salary * 6;
        break;
      default:
        `Sorry, you can't have money`;
    }
    return loan;
  };
}

let student1 = new Student("Karina", 1000, "A");
let student2 = new Student("Andrew", 1000, "B");
let student3 = new Student("Dana", 1000, "B");
let student4 = new Student("Artem", 1000, "A");
let student5 = new Student("Liza", 1000, "C");

let students = [student1, student2, student3, student4, student5];

function getLoanStudents() {
  return students
    .map((item) => item.getLoan())
    .reduce((accum, current) => accum + current);
}
getLoanStudents(students);

/*
Task 2 üë®‚Äçüè´ –¢—Ä–æ–ª–ª–∏ –∞—Ç–∞–∫—É—é—Ç –Ω–∞—à —Ä–∞–∑–¥–µ–ª —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏!!!
–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –≥–ª–∞—Å–Ω—ã–µ –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Ç—Ä–æ–ª–ª–µ–π, –Ω–µ–π—Ç—Ä–∞–ª–∏–∑—É—è —É–≥—Ä–æ–∑—É.
–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ –≥–ª–∞—Å–Ω—ã–º–∏.
–ù–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç—Ä–æ–∫–∞ ¬´This website is for losers LOL!¬ª —Å—Ç–∞–Ω–µ—Ç "Ths wbst s fr lsrs LL!".
*/

const vowel = ["a", "e", "i", "o", "u", "y", "A", "E", "I", "O", "U", "Y"];

function hukTrollo(str) {
  let arrNoVowel = [];
  str
    .split("")
    .map((item) => (vowel.includes(item) ? undefined : arrNoVowel.push(item)));

  return arrNoVowel.join("");
}
hukTrollo("This website is for losers LOL!");

//Task 3 üë®‚Äçüè´ –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏, –Ω–µ—Ç —Ç–µ–æ—Ä–∏–∏
/*–í –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ –ø—Ä–∏–º–µ—Ä–∞—Ö –ø–æ–∫–∞–∑–∞–Ω–æ, –∫–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é:
    accum("abcd") -> "A-Bb-Ccc-Dddd"
    accum("RqaEzty") -> "R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy"
    accum("cwAt") -> "C-Ww-Aaa-Tttt"
–ü–∞—Ä–∞–º–µ—Ç—Ä - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –≤–∫–ª—é—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –æ—Ç a..z –∏ A..Z.
*/

function accum(item) {
  let dash = "-";
  let arr = [];
  let arrOfStr = item.split("");
  for (let i = 0; i < arrOfStr.length; i++) {
    arr.push(dash);
    arr.push(arrOfStr[i].toUpperCase());
    for (let j = 0; j < i; j++) {
      arr.push(arrOfStr[i]);
    }
  }
  return arr.slice(1).join("");
}
accum("RqaEzty");

//Task 4 üë®‚Äçüè´ –°–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –∏ —Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π
/*–í —ç—Ç–æ–º –Ω–µ–±–æ–ª—å—à–æ–º –∑–∞–¥–∞–Ω–∏–∏ –≤–∞–º –¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —á–∏—Å–µ–ª, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏,
 –∏ –≤—ã –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∏ –Ω–∞–∏–º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ.
    highAndLow("1 2 3 4 5"); // return "5 1"
    highAndLow("1 2 -3 4 5"); // return "5 -3"
    highAndLow("1 9 3 4 -5"); // return "9 -5"
–°—Ç—Ä–æ–∫–∞ –≤—ã–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –¥–≤—É—Ö —á–∏—Å–µ–ª, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ–¥–Ω–∏–º –ø—Ä–æ–±–µ–ª–æ–º,
 –ø—Ä–∏ —ç—Ç–æ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–≤—ã–º.
 */

function highAndLow(item) {
  let negArr = [];
  let allElArr = item.split("");

  while (allElArr.includes("-")) {
    let indexMinus = allElArr.indexOf("-");
    let negEl = "-" + allElArr[indexMinus + 1];
    negArr.push(negEl);
    allElArr.splice(indexMinus, 2);
  }
  let arrClean = negArr
    .concat(allElArr)
    .filter((item) => item !== " ")
    .sort((a, b) => b - a);

  return `${arrClean[0]} ${arrClean[arrClean.length - 1]}`;
}
highAndLow("1 9 3 4 -5");

//Task 5 üë®‚Äçüè´ –ò–∑–æ–≥—Ä–∞–º–º—ã
/*
–ò–∑–æ–≥—Ä–∞–º–º–∞ - —ç—Ç–æ —Å–ª–æ–≤–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –±—É–∫–≤, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–ª–∏ –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö.
–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –∏–∑–æ–≥—Ä–∞–º–º–æ–π.
–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–≥—Ä–∞–º–º–æ–π. –†–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤ –º—ã –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
    isIsogram("Dermatoglyphics") == true
    isIsogram("aba") == false
    isIsogram("moOse") == false // -- ignore letter case
*/

function isIsogram(item) {
  let str = item.toLowerCase();
  let arr = str.split("");
  let set = new Set();

  for (let key of arr) {
    set.add(key);
  }

  let newArr = Array.from(set.values());
  let strFinal = newArr.join("");
  return str !== strFinal ? `it's not Isogram` : `It's a isogram`;
}
isIsogram("aba");

//Task 6 üë®‚Äçüè´ –°—á–∏—Ç–∞–µ–º –∫–æ–¥—ã —Å–∏–º–≤–æ–ª–æ–≤
/*–£—á–∏—Ç—ã–≤–∞—è —Å—Ç—Ä–æ–∫—É, –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –≤ –µ–≥–æ –∫–æ–¥ —Å–∏–º–≤–æ–ª–∞ ASCII –∏ —Å–æ–µ–¥–∏–Ω–∏—Ç–µ –∏—Ö –≤–º–µ—Å—Ç–µ,
—á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —á–∏—Å–ª–æ. –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é total1

–ó–∞—Ç–µ–º –∑–∞–º–µ–Ω–∏—Ç–µ –≤—Å–µ —á–∏—Å–ª–∞ 7 –Ω–∞ —á–∏—Å–ª–æ 1 –∏ –Ω–∞–∑–æ–≤–∏—Ç–µ —ç—Ç–æ —á–∏—Å–ª–æ total2

–ü–æ—Å–ª–µ –≤–µ—Ä–Ω–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Å—É–º–º–æ–π —Ü–∏—Ñ—Ä total1 –∏ total2

'ABC' --> 'A' = 65, 'B' = 66, 'C' = 67 --> 656667
*/

function getMathOfASCII(item) {
  let string = "";

  for (let key of item) {
    let strOfNum = String(key.charCodeAt());
    string += strOfNum;
  }

  let total1 = +string;

  let arrOfTotal1 = Array.from(String(total1));
  arrOfTotal1.map((item, index) =>
    item == "7" ? arrOfTotal1.splice(index, 1, "1") : undefined
  );

  let total2 = +arrOfTotal1.join("");

  return total1 - total2;
}
getMathOfASCII("ABCDEF");

//Task 7 üë®‚Äçüè´ –î—É–±–ª–∏–∫–∞—Ç—ã
/*
–¶–µ–ª—å —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è - –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É,
–≥–¥–µ –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Ä–∞–≤–µ–Ω (,
–µ—Å–ª–∏ —ç—Ç–æ—Ç —Å–∏–º–≤–æ–ª –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –∏–ª–∏ ),
–µ—Å–ª–∏ —ç—Ç–æ—Ç —Å–∏–º–≤–æ–ª –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
–ò–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞ —Å–∏–º–≤–æ–ª–∞.
    "din" => "((("
    "recede" => "()()()"
    "Success" => ")())())"
    "(( @" => "))(("
*/

//Tasks from 'Learn JS'
/*
–í—ã—á–∏—Å–ª–∏—Ç—å —Å—É–º–º—É —á–∏—Å–µ–ª –¥–æ –¥–∞–Ω–Ω–æ–≥–æ
–≤–∞–∂–Ω–æ—Å—Ç—å: 5
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é sumTo(n), –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—É–º–º—É —á–∏—Å–µ–ª 1 + 2 + ... + n.

–ù–∞–ø—Ä–∏–º–µ—Ä:

sumTo(1) = 1
sumTo(2) = 2 + 1 = 3
sumTo(3) = 3 + 2 + 1 = 6
sumTo(4) = 4 + 3 + 2 + 1 = 10
...
sumTo(100) = 100 + 99 + ... + 2 + 1 = 5050
–°–¥–µ–ª–∞–π—Ç–µ —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ä–µ—à–µ–Ω–∏—è:

–° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ü–∏–∫–ª–∞.
–ß–µ—Ä–µ–∑ —Ä–µ–∫—É—Ä—Å–∏—é, —Ç.–∫. sumTo(n) = n + sumTo(n-1) for n > 1.
–° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–æ—Ä–º—É–ª—ã –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏.
–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –≤–∞—à–µ–π —Ñ—É–Ω–∫—Ü–∏–∏:

function sumTo(n) {}

alert( sumTo(100) ); // 5050
P.S. –ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Ä–µ—à–µ–Ω–∏—è —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π? –°–∞–º—ã–π –º–µ–¥–ª–µ–Ω–Ω—ã–π? –ü–æ—á–µ–º—É?

P.P.S. –ú–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ä–µ–∫—É—Ä—Å–∏–∏ –ø–æ—Å—á–∏—Ç–∞—Ç—å sumTo(100000)?
*/

function sumTo(value) {
  let result = 0;
  for (let i = 0; i <= value; i++) {
    result += i;
  }
  return result;
}
sumTo(10);

sumTo = (value) => (value == 1 ? 1 : value + sum(value - 1));
sum(10);

sumTo = (value) => (value == 1 ? 1 : value(value + 1) / 2);
sum(10);

/*
–í—ã—á–∏—Å–ª–∏—Ç—å —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª
–≤–∞–∂–Ω–æ—Å—Ç—å: 4
–§–∞–∫—Ç–æ—Ä–∏–∞–ª –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ ‚Äì —ç—Ç–æ —á–∏—Å–ª–æ, —É–º–Ω–æ–∂–µ–Ω–Ω–æ–µ –Ω–∞ "—Å–µ–±—è –º–∏–Ω—É—Å –æ–¥–∏–Ω",
–∑–∞—Ç–µ–º –Ω–∞ "—Å–µ–±—è –º–∏–Ω—É—Å –¥–≤–∞", –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–æ 1. –§–∞–∫—Ç–æ—Ä–∏–∞–ª n –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç—Å—è –∫–∞–∫ n!

–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –∫–∞–∫:

n! = n * (n - 1) * (n - 2) * ...*1
–ü—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö n:

1! = 1
2! = 2 * 1 = 2
3! = 3 * 2 * 1 = 6
4! = 4 * 3 * 2 * 1 = 24
5! = 5 * 4 * 3 * 2 * 1 = 120
–ó–∞–¥–∞—á–∞ ‚Äì –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é factorial(n), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç n!, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ–∫—É—Ä—Å–∏—é.

alert( factorial(5) ); // 120
P.S. –ü–æ–¥—Å–∫–∞–∑–∫–∞: n! –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –∫–∞–∫ n * (n-1)! –ù–∞–ø—Ä–∏–º–µ—Ä: 3! = 3*2! = 3*2*1! = 6
*/

let factorial = (value) => (value == 1 ? 1 : (value *= factorial(value - 1)));
factorial(5);

/*
–ß–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏
–≤–∞–∂–Ω–æ—Å—Ç—å: 5
–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ñ–æ—Ä–º—É–ª–æ–π Fn = Fn-1 + Fn-2.
–¢–æ –µ—Å—Ç—å, —Å–ª–µ–¥—É—é—â–µ–µ —á–∏—Å–ª–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∫–∞–∫ —Å—É–º–º–∞ –¥–≤—É—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö.

–ü–µ—Ä–≤—ã–µ –¥–≤–∞ —á–∏—Å–ª–∞ —Ä–∞–≤–Ω—ã 1, –∑–∞—Ç–µ–º 2(1+1), –∑–∞—Ç–µ–º 3(1+2), 5(2+3) –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ: 1, 1, 2, 3, 5, 8, 13, 21....

–ß–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏ —Ç–µ—Å–Ω–æ —Å–≤—è–∑–∞–Ω—ã —Å –∑–æ–ª–æ—Ç—ã–º —Å–µ—á–µ–Ω–∏–µ–º –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –ø—Ä–∏—Ä–æ–¥–Ω—ã—Ö —è–≤–ª–µ–Ω–∏–π –≤–æ–∫—Ä—É–≥ –Ω–∞—Å.

–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é fib(n) –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç n-–µ —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏.

–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã:

function fib(n) {}

alert(fib(3)); // 2
alert(fib(7)); // 13
alert(fib(77)); // 5527939700884757
P.S. –í—Å–µ –∑–∞–ø—É—Å–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –≤—ã—à–µ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –±—ã—Å—Ç—Ä–æ.
 –í—ã–∑–æ–≤ fib(77) –¥–æ–ª–∂–µ–Ω –∑–∞–Ω–∏–º–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ –¥–æ–ª–∏ —Å–µ–∫—É–Ω–¥—ã.
*/

function fib(n) {
  return n <= 1 ? n : fib(n - 1) + fib(n - 2);
}
fib(7);

/*
–í—ã–≤–æ–¥ –æ–¥–Ω–æ—Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
–≤–∞–∂–Ω–æ—Å—Ç—å: 5
–î–æ–ø—É—Å—Ç–∏–º, —É –Ω–∞—Å –µ—Å—Ç—å –æ–¥–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–∫–∞–∫ –æ–ø–∏—Å–∞–Ω–æ –≤ –≥–ª–∞–≤–µ –†–µ–∫—É—Ä—Å–∏—è –∏ —Å—Ç–µ–∫):

let list = {
  value: 1,
  next: {
    value: 2,
    next: {
      value: 3,
      next: {
        value: 4,
        next: null
      }
    }
  }
};
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é printList(list), –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ –ø–æ –æ–¥–Ω–æ–º—É.

–°–¥–µ–ª–∞–π—Ç–µ –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ä–µ—à–µ–Ω–∏—è: –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª –∏ —á–µ—Ä–µ–∑ —Ä–µ–∫—É—Ä—Å–∏—é.

–ö–∞–∫ –ª—É—á—à–µ: —Å —Ä–µ–∫—É—Ä—Å–∏–µ–π –∏–ª–∏ –±–µ–∑?
*/

let list = {
  value: 1,
  next: {
    value: 2,
    next: {
      value: 3,
      next: {
        value: 4,
        next: null,
      },
    },
  },
};

function printList(list) {
  let one;
  let two;
  let three;
  let four;
  for (let i = 0; i < 1; i++) {
    one = list.value;

    for (let j = 0; j < 1; j++) {
      two = list.next.value;

      for (let m = 0; m < 1; m++) {
        three = list.next.next.value;

        for (let n = 0; n < 1; n++) {
          four = list.next.next.next.value;
        }
      }
    }
  }
  return `${one}, ${two}, ${three}, ${four}`;
}
printList(list);

function printList(list) {
  let tmp = list;

  while (tmp) {
    console.log(tmp.value);
    tmp = tmp.next;
  }
}
printList(list);

function printList(list) {
  console.log(list.value);

  if (list.next) {
    printList(list.next);
  }
}
printList(list);

/*
–í—ã–≤–æ–¥ –æ–¥–Ω–æ—Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
–≤–∞–∂–Ω–æ—Å—Ç—å: 5
–í—ã–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –í—ã–≤–æ–¥ –æ–¥–Ω–æ—Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.

–°–¥–µ–ª–∞–π—Ç–µ –¥–≤–∞ —Ä–µ—à–µ–Ω–∏—è: —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ü–∏–∫–ª–∞ –∏ —á–µ—Ä–µ–∑ —Ä–µ–∫—É—Ä—Å–∏—é.
*/

function printReverse(list) {
  let arr = [];
  let tmp = list;
  let i = 0;

  while (tmp) {
    arr.push(tmp.value);
    tmp = tmp.next;
  }

  let arrMod = arr.reverse();
  while (i < arrMod.length) {
    alert(arrMod[i]);
    i++;
  }
}
printReverse(list);
