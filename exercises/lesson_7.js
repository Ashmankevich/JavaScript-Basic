//Functions level 2
/*Complete exercise
NORMAL level
Task 1 üñ•
–í—ã–≤–µ–¥–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –≤ –∫–æ–Ω—Å–æ–ª—å —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ forEach

    const fibonacci = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]
–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è function declaration & arrow function
*/

const fibonacci = [
  0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987,
];

function getNumbres() {
  return fibonacci.forEach(function callback(item) {
    return console.log(item);
  });
}
getNumbres();

function getNumbresTwo() {
  return fibonacci.forEach((item) => console.log(item));
}
getNumbresTwo();

let getNumbresThree = () => fibonacci.forEach((item) => console.log(item));
getNumbresThree();

//Task 2 üñ•
/*–ò—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ map —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Å—Å–∏–≤–∞ users,
–≤ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞:

['member 1: Darya', 'member 2: Masha', ... etc]

    const users = ['Darya', 'Masha', 'Denis', 'Vitaliy', 'Polina', 'Anton']
–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è function declaration & arrow function.
*/

const users = ["Darya", "Masha", "Denis", "Vitaliy", "Polina", "Anton"];

function getUsers() {
  return users.map(function callback(item, index) {
    return `member ${index + 1} : ${item}`;
  });
}
getUsers();

function getUsers() {
  return users.map((item, index) => `member ${index + 1} : ${item}`);
}
getUsers();

let getUsers = () =>
  users.map((item, index) => `member ${index + 1} : ${item}`);
getUsers();

//Tasks from 'Learn JS'
/*
–í—ã—á–∏—Å–ª–∏—Ç—å —Å—É–º–º—É —á–∏—Å–µ–ª –¥–æ –¥–∞–Ω–Ω–æ–≥–æ
–≤–∞–∂–Ω–æ—Å—Ç—å: 5
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é sumTo(n), –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—É–º–º—É —á–∏—Å–µ–ª 1 + 2 + ... + n.

–ù–∞–ø—Ä–∏–º–µ—Ä:

sumTo(1) = 1
sumTo(2) = 2 + 1 = 3
sumTo(3) = 3 + 2 + 1 = 6
sumTo(4) = 4 + 3 + 2 + 1 = 10
...
sumTo(100) = 100 + 99 + ... + 2 + 1 = 5050
–°–¥–µ–ª–∞–π—Ç–µ —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ä–µ—à–µ–Ω–∏—è:

–° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ü–∏–∫–ª–∞.
–ß–µ—Ä–µ–∑ —Ä–µ–∫—É—Ä—Å–∏—é, —Ç.–∫. sumTo(n) = n + sumTo(n-1) for n > 1.
–° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–æ—Ä–º—É–ª—ã –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏.
–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –≤–∞—à–µ–π —Ñ—É–Ω–∫—Ü–∏–∏:

function sumTo(n) {}

alert( sumTo(100) ); // 5050
P.S. –ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Ä–µ—à–µ–Ω–∏—è —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π? –°–∞–º—ã–π –º–µ–¥–ª–µ–Ω–Ω—ã–π? –ü–æ—á–µ–º—É?

P.P.S. –ú–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ä–µ–∫—É—Ä—Å–∏–∏ –ø–æ—Å—á–∏—Ç–∞—Ç—å sumTo(100000)?
*/

function sumTo(value) {
  let result = 0;
  for (let i = 0; i <= value; i++) {
    result += i;
  }
  return result;
}
sumTo(10);

sumTo = (value) => (value == 1 ? 1 : value + sum(value - 1));
sum(10);

sumTo = (value) => (value == 1 ? 1 : value(value + 1) / 2);
sum(10);

/*
–í—ã—á–∏—Å–ª–∏—Ç—å —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª
–≤–∞–∂–Ω–æ—Å—Ç—å: 4
–§–∞–∫—Ç–æ—Ä–∏–∞–ª –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ ‚Äì —ç—Ç–æ —á–∏—Å–ª–æ, —É–º–Ω–æ–∂–µ–Ω–Ω–æ–µ –Ω–∞ "—Å–µ–±—è –º–∏–Ω—É—Å –æ–¥–∏–Ω",
–∑–∞—Ç–µ–º –Ω–∞ "—Å–µ–±—è –º–∏–Ω—É—Å –¥–≤–∞", –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–æ 1. –§–∞–∫—Ç–æ—Ä–∏–∞–ª n –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç—Å—è –∫–∞–∫ n!

–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –∫–∞–∫:

n! = n * (n - 1) * (n - 2) * ...*1
–ü—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö n:

1! = 1
2! = 2 * 1 = 2
3! = 3 * 2 * 1 = 6
4! = 4 * 3 * 2 * 1 = 24
5! = 5 * 4 * 3 * 2 * 1 = 120
–ó–∞–¥–∞—á–∞ ‚Äì –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é factorial(n), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç n!, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ–∫—É—Ä—Å–∏—é.

alert( factorial(5) ); // 120
P.S. –ü–æ–¥—Å–∫–∞–∑–∫–∞: n! –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –∫–∞–∫ n * (n-1)! –ù–∞–ø—Ä–∏–º–µ—Ä: 3! = 3*2! = 3*2*1! = 6
*/

let factorial = (value) => (value == 1 ? 1 : (value *= factorial(value - 1)));
factorial(5);

/*
–ß–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏
–≤–∞–∂–Ω–æ—Å—Ç—å: 5
–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ñ–æ—Ä–º—É–ª–æ–π Fn = Fn-1 + Fn-2.
–¢–æ –µ—Å—Ç—å, —Å–ª–µ–¥—É—é—â–µ–µ —á–∏—Å–ª–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∫–∞–∫ —Å—É–º–º–∞ –¥–≤—É—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö.

–ü–µ—Ä–≤—ã–µ –¥–≤–∞ —á–∏—Å–ª–∞ —Ä–∞–≤–Ω—ã 1, –∑–∞—Ç–µ–º 2(1+1), –∑–∞—Ç–µ–º 3(1+2), 5(2+3) –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ: 1, 1, 2, 3, 5, 8, 13, 21....

–ß–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏ —Ç–µ—Å–Ω–æ —Å–≤—è–∑–∞–Ω—ã —Å –∑–æ–ª–æ—Ç—ã–º —Å–µ—á–µ–Ω–∏–µ–º –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –ø—Ä–∏—Ä–æ–¥–Ω—ã—Ö —è–≤–ª–µ–Ω–∏–π –≤–æ–∫—Ä—É–≥ –Ω–∞—Å.

–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é fib(n) –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç n-–µ —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏.

–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã:

function fib(n) {}

alert(fib(3)); // 2
alert(fib(7)); // 13
alert(fib(77)); // 5527939700884757
P.S. –í—Å–µ –∑–∞–ø—É—Å–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –≤—ã—à–µ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –±—ã—Å—Ç—Ä–æ.
 –í—ã–∑–æ–≤ fib(77) –¥–æ–ª–∂–µ–Ω –∑–∞–Ω–∏–º–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ –¥–æ–ª–∏ —Å–µ–∫—É–Ω–¥—ã.
*/

function fib(n) {
  return n <= 1 ? n : fib(n - 1) + fib(n - 2);
}
fib(7);

/*
–í—ã–≤–æ–¥ –æ–¥–Ω–æ—Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
–≤–∞–∂–Ω–æ—Å—Ç—å: 5
–î–æ–ø—É—Å—Ç–∏–º, —É –Ω–∞—Å –µ—Å—Ç—å –æ–¥–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–∫–∞–∫ –æ–ø–∏—Å–∞–Ω–æ –≤ –≥–ª–∞–≤–µ –†–µ–∫—É—Ä—Å–∏—è –∏ —Å—Ç–µ–∫):

let list = {
  value: 1,
  next: {
    value: 2,
    next: {
      value: 3,
      next: {
        value: 4,
        next: null
      }
    }
  }
};
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é printList(list), –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ –ø–æ –æ–¥–Ω–æ–º—É.

–°–¥–µ–ª–∞–π—Ç–µ –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ä–µ—à–µ–Ω–∏—è: –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª –∏ —á–µ—Ä–µ–∑ —Ä–µ–∫—É—Ä—Å–∏—é.

–ö–∞–∫ –ª—É—á—à–µ: —Å —Ä–µ–∫—É—Ä—Å–∏–µ–π –∏–ª–∏ –±–µ–∑?
*/

let list = {
  value: 1,
  next: {
    value: 2,
    next: {
      value: 3,
      next: {
        value: 4,
        next: null,
      },
    },
  },
};

function printList(list) {
  let one;
  let two;
  let three;
  let four;
  for (let i = 0; i < 1; i++) {
    one = list.value;

    for (let j = 0; j < 1; j++) {
      two = list.next.value;

      for (let m = 0; m < 1; m++) {
        three = list.next.next.value;

        for (let n = 0; n < 1; n++) {
          four = list.next.next.next.value;
        }
      }
    }
  }
  return `${one}, ${two}, ${three}, ${four}`;
}
printList(list);

function printList(list) {
  let tmp = list;

  while (tmp) {
    console.log(tmp.value);
    tmp = tmp.next;
  }
}
printList(list);

function printList(list) {
  console.log(list.value);

  if (list.next) {
    printList(list.next);
  }
}
printList(list);
