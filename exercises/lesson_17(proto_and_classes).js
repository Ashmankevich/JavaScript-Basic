//–ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞
/*–≤–∞–∂–Ω–æ—Å—Ç—å: 5
–ó–∞–¥–∞—á–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö —á–∞—Å—Ç–µ–π.

–£ –Ω–∞—Å –µ—Å—Ç—å –æ–±—ä–µ–∫—Ç—ã:

let head = {
  glasses: 1
};

let table = {
  pen: 3
};

let bed = {
  sheet: 1,
  pillow: 2
};

let pockets = {
  money: 2000
};

–° –ø–æ–º–æ—â—å—é —Å–≤–æ–π—Å—Ç–≤–∞ __proto__ –∑–∞–¥–∞–π—Ç–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø—ã —Ç–∞–∫,
—á—Ç–æ–±—ã –ø–æ–∏—Å–∫ –ª—é–±–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É—Ç–∏: pockets ‚Üí bed ‚Üí table ‚Üí head.
–ù–∞–ø—Ä–∏–º–µ—Ä, pockets.pen –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ 3 (–Ω–∞–π–¥–µ–Ω–Ω–æ–µ –≤ table),
–∞ bed.glasses ‚Äì –∑–Ω–∞—á–µ–Ω–∏–µ 1 (–Ω–∞–π–¥–µ–Ω–Ω–æ–µ –≤ head).
–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å: –∫–∞–∫ –±—ã—Å—Ç—Ä–µ–µ –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ glasses ‚Äì —á–µ—Ä–µ–∑ pockets.glasses
 –∏–ª–∏ —á–µ—Ä–µ–∑ head.glasses? –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ—Å—Ç–∞–≤—å—Ç–µ —Ü–µ–ø–æ—á–∫–∏ –ø–æ–∏—Å–∫–∞ –∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ –∏—Ö.*/

let head = {
  glasses: 1,
};

let table = {
  pen: 3,
  __proto__: head,
};

let bed = {
  sheet: 1,
  pillow: 2,
  __proto__: table,
};

let pockets = {
  money: 2000,
  __proto__: bed,
};

console.log(pockets.pen);
console.log(bed.glasses);

//–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –ø–æ–º–æ—â—å—é —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
/*–≤–∞–∂–Ω–æ—Å—Ç—å: 5
–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ —É –Ω–∞—Å –∏–º–µ–µ—Ç—Å—è –Ω–µ–∫–∏–π –æ–±—ä–µ–∫—Ç obj,
—Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–µ–π-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º ‚Äì –º—ã –Ω–µ –∑–Ω–∞–µ–º –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ,
–Ω–æ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã —Å–æ–∑–¥–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç —Ç–∞–∫–æ–≥–æ –∂–µ —Ç–∏–ø–∞.

–ú–æ–∂–µ–º –ª–∏ –º—ã —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫?

let obj2 = new obj.constructor();
–ü—Ä–∏–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ obj, —Å –∫–æ—Ç–æ—Ä–æ–π —Ç–∞–∫–æ–π –≤—ã–∑–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç.
–ò –ø—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞, —Å –∫–æ—Ç–æ—Ä–æ–π —Ç–∞–∫–æ–π –∫–æ–¥ –ø–æ–≤–µ–¥—ë—Ç —Å–µ–±—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.
*/

function Android(name) {
  this.name = name;
  console.log(name);
}

let android = new Android("Mr. Robot");
let android2 = new android.constructor("Mr. T1000");

function Robot(name) {
  this.name = name;
  console.log(name);
}

Robot.prototype = {};

let robot = new Robot("Mr. Black");
let robot2 = new robot2.constructor("Mr. White");

//–î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—è–º –º–µ—Ç–æ–¥ "f.defer(ms)"
/*–≤–∞–∂–Ω–æ—Å—Ç—å: 5
–î–æ–±–∞–≤—å—Ç–µ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –≤ –ø—Ä–æ—Ç–æ—Ç–∏–ø –º–µ—Ç–æ–¥ defer(ms), –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ ms –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥.

–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∞–∫–æ–π –∫–æ–¥:

function f() {
  alert("Hello!");
}

f.defer(1000); // –≤—ã–≤–µ–¥–µ—Ç "Hello!" —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
*/

Function.prototype.defer = function (ms) {
  setTimeout(this, ms);
};
function f() {
  alert("Hello!");
}

f.defer(1000);

//–î–æ–±–∞–≤—å—Ç–µ toString –≤ —Å–ª–æ–≤–∞—Ä—å
/*–≤–∞–∂–Ω–æ—Å—Ç—å: 5
–ò–º–µ–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç dictionary, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å –ø–æ–º–æ—â—å—é Object.create(null) –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª—é–±—ã—Ö –ø–∞—Ä –∫–ª—é—á/–∑–Ω–∞—á–µ–Ω–∏–µ.

–î–æ–±–∞–≤—å—Ç–µ –µ–º—É –º–µ—Ç–æ–¥ dictionary.toString(), –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç–æ–π.
–í–∞—à toString –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –ø—Ä–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞ —Å –ø–æ–º–æ—â—å—é —Ü–∏–∫–ª–∞ for..in.

–í–æ—Ç —Ç–∞–∫ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å:

let dictionary = Object.create(null);

// –≤–∞—à –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥ dictionary.toString

// –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö
dictionary.apple = "Apple";
dictionary.__proto__ = "test"; // –∑–¥–µ—Å—å __proto__ -- —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –∫–ª—é—á

// —Ç–æ–ª—å–∫–æ apple –∏ __proto__ –≤—ã–≤–µ–¥–µ–Ω—ã –≤ —Ü–∏–∫–ª–µ
for(let key in dictionary) {
  alert(key); // "apple", –∑–∞—Ç–µ–º "__proto__"
}

// –≤–∞—à –º–µ—Ç–æ–¥ toString –≤ –¥–µ–π—Å—Ç–≤–∏–∏
alert(dictionary); // "apple,__proto__"
*/

let dictionary = Object.create(null);

Object.defineProperty(dictionary, "toString", {
  value: () => Object.keys(dictionary).join(),
});

// –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö
dictionary.apple = "AppleMac";
dictionary.__proto__ = "test"; // –∑–¥–µ—Å—å __proto__ -- —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –∫–ª—é—á

// —Ç–æ–ª—å–∫–æ apple –∏ __proto__ –≤—ã–≤–µ–¥–µ–Ω—ã –≤ —Ü–∏–∫–ª–µ
for (let key in dictionary) {
  console.log(key); // "apple", –∑–∞—Ç–µ–º "__proto__"
}

// –≤–∞—à –º–µ—Ç–æ–¥ toString –≤ –¥–µ–π—Å—Ç–≤–∏–∏
alert(dictionary); // "apple,__proto__"

/*
–ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ –∫–ª–∞—Å—Å
–≤–∞–∂–Ω–æ—Å—Ç—å: 5
–ö–ª–∞—Å—Å Clock –Ω–∞–ø–∏—Å–∞–Ω –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ. –ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–ª–∞—Å—Å–æ–≤.
*/

function Time({ template }) {
  this.template = template;
}

Time.prototype.render = function () {
  let date = new Date();
  let hours = date.getHours();
  let mins = date.getMinutes();
  let sec = date.getSeconds();

  let output = this.template
    .replace("h", hours)
    .replace("m", mins)
    .replace("s", sec);

  console.log(output);
};

Time.prototype.start = function () {
  this.render();
  this.timer = setInterval(() => this.render(), 1000);
};

Time.prototype.stop = function () {
  clearInterval(this.timer);
};

let time = new Time({ template: "h:m:s" });

time.start();

class Clock {
  constructor({ wrapped }) {
    this.wrapped = wrapped;
  }
  render() {
    let date = new Date();
    let hours = date.getHours();
    let mins = date.getMinutes();
    let sec = date.getSeconds();

    let output = this.wrapped
      .replace("h", hours)
      .replace("m", mins)
      .replace("s", sec);

    console.log(output);
  }

  start() {
    this.render();
    this.timer = setInterval(() => this.render(), 1000);
  }

  stop() {
    clearInterval(this.timer);
  }
}

let clock = new Clock({ wrapped: "h:m:s" });

clock.start();

class ExtendedClock extends Clock {
  constructor(additional) {
    super(additional);
    let { precision = 1000 } = additional;
    this.precision = precision;
  }
  start() {
    this.render();
    this.timer = setInterval(() => this.render(), this.precision);
  }
}

let clock2 = new ExtendedClock({ wrapped: "h:m:s", precision: 3000 });
clock2.start();

//–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞
/*–≤–∞–∂–Ω–æ—Å—Ç—å: 5
–í –∫–æ–¥–µ –Ω–∏–∂–µ –∫–ª–∞—Å—Å Rabbit –Ω–∞—Å–ª–µ–¥—É–µ—Ç Animal.

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Rabbit –Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è. –ß—Ç–æ –Ω–µ —Ç–∞–∫? –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É.

class Animal {

   constructor(name) {
     this.name = name;
   }
 
 }
 
 class Rabbit extends Animal {
   constructor(name) {
     this.name = name;
     this.created = Date.now();
   }
 }
 
 let rabbit = new Rabbit("–ë–µ–ª—ã–π –∫—Ä–æ–ª–∏–∫"); // Error: this is not defined
 alert(rabbit.name);
 */

class Animal {
  constructor(name) {
    this.name = name;
  }
}

class Rabbit extends Animal {
  constructor(name) {
    super(name);
    this.created = Date.now();
  }
}

let rabbit = new Rabbit("–ë–µ–ª—ã–π –∫—Ä–æ–ª–∏–∫");
alert(rabbit.name);

//Task of TMS
/*
Task 1 üíª
–°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å Developer

–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä name
–†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ startWork –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É:
name start work ...

–†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ endtWork –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É:
name end work ...

–î–∞–ª–µ–µ —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –¥–≤–∞ –∫–ª–∞—Å—Å–∞ Frontend Backend –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã –∏–∑ –∫–ª–∞—Å—Å–∞ Developer

–ö–ª–∞—Å—Å Frontend –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ buildWebSite –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É:

name start build website

–ö–ª–∞—Å—Å Frontend –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á websiteName
–≤ –∫–æ—Ç–æ—Ä—ã–π –º—ã –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ–±-—Å–∞–π—Ç–∞ –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫.

–ö–ª–∞—Å—Å Backend –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ buildServer –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É:

name start build server

–ü—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–≤–∞ –∫–ª–∞—Å—Å–∞ Frontend Backend –∏ –≤—ã–∑–æ–≤–∏—Ç–µ —É –Ω–∏—Ö –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã.

    const john = new Frontend('john');
    john.startWork()        // john start work ...
    john.buildWebsite()     // john start build website Amazon
    john.endWork()          // john end work ...
    */

class Developer {
  constructor(name) {
    this.name = name;
  }
  startWork() {
    return `${this.name} start work`;
  }
  endWork() {
    return `${this.name} end work`;
  }
}

class Frontend extends Developer {
  websiteName = "Google";
  buildWebSite() {
    return `${this.name} start build website ${this.websiteName}`;
  }
}

class Backend extends Developer {
  buildServer() {
    return `${this.name} start build server`;
  }
}

const andrew = new Frontend("Andrew");
console.log(andrew.startWork());
console.log(andrew.buildWebSite());
console.log(andrew.endWork());

const karina = new Backend("Karina");
console.log(karina.startWork());
console.log(karina.buildServer());
console.log(karina.endWork());
